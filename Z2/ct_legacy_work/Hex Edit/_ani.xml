<?xml version="1.0"?>
<!DOCTYPE binary_file_format SYSTEM "BinaryFileFormat.dtd">
<binary_file_format name="Windows_animated_cursor" default_byte_order="little" allow_editing="false" comment="File format for Windows animated cursors">
    <define_struct type_name="ANIHEADER" comment="Animation header">
        <data name="headerSize" type="int" format="unsigned" comment="The size of this header (redundant since it's the same as the chunk size)"/>
        <data name="numFrames" type="int" format="unsigned" comment="Number of stored frames in this animation"/>
        <data name="numSteps" type="int" format="unsigned" comment="Number of steps in this animation. May include duplicate frames. Equal to numFrames if no sequence chunk is present"/>
        <eval expr="stepCount = numSteps" comment="This will be used in the rate and sequence chunks"/>
        <data name="width" type="int" format="unsigned"/>
        <data name="height" type="int" format="unsigned"/>
        <data name="bitCount" type="int" format="unsigned" len="4" domain="this==0||this==1||this==4||this==8||this==16||this==24||this==32" comment="Bits per pixel. If 8 or less each pixel is an index into the palette.  If 16 or more the pixel itself contains the colour info." units="bits / pixel"/>
        <data name="planes" type="int" len="4" format="unsigned" domain="this == 1" comment="These files always seem to contain just one plane."/>
        <data name="displayRate" type="int" format="unsigned" comment="Default display rate in 1/60s (Rate = 60/displayRate fps)"/>
        <data name="iconType" type="int" format="unsigned" bits="1" direction="up" domain="{RAW_DATA,ICON}" comment="If frames are icons or raw bitmap data"/>
        <data name="hasSequence" type="int" format="unsigned" bits="1" direction="up" domain="{false,true}" comment="If true, the file contains sequence data"/>
        <data name="" type="int" format="unsigned" bits="20" direction="up"/>
    </define_struct>
    <define_struct type_name="BITMAPICONIMAGE" comment="Contains an icon image in bitmap format">
        <eval expr="bitmapOffset = addressof(this)" display_error="false" display_result="false"/>
        <struct name="header" type_name="BITMAPINFOHEADER" comment="DIB header">
            <data name="headerSize" type="int" len="4" format="signed" units="bytes" comment="Size of this structure" domain="this &gt;= 40"/>
            <data name="width" type="int" len="4" format="signed" units="pixels" domain="this &gt; 0"/>
            <data name="height" type="int" len="4" format="signed" units="pixels" domain="this &gt; 0" comment="Specifies the combined height of the XOR and AND masks"/>
            <data name="planes" type="int" len="2" format="signed" domain="this == 1" comment="These files always seem to contain just one plane."/>
            <data name="bitCount" type="int" len="2" domain="this==1||this==4||this==8||this==16||this==24||this==32" format="signed" comment="Bits per pixel. If 8 or less each pixel is an index into the palette.  If 16 or more the pixel itself contains the colour info." units="bits / pixel"/>
            <data name="compression" type="int" len="4" format="signed" comment="Not used."/>
            <data name="imageSize" type="int" len="4" format="signed" comment="Size of the bitmap itslef  - may be zero if compression is zero (off)." units="bytes"/>
            <data name="xPelsPerMeter" type="int" len="4" format="signed" units="pixels / meter" comment="Not used."/>
            <data name="yPelsPerMeter" type="int" len="4" format="signed" units="pixels / meter" comment="Not used."/>
            <data name="clrUsed" type="int" len="4" format="signed" comment="Not used."/>
            <data name="clrImportant" type="int" len="4" format="signed" comment="Not used."/>
        </struct>
        <if test="header.bitCount &lt; 16" comment="Colour lookup table.  This is not needed if the pixel values are actual colours and not indices into the palette.">
            <for name="colour" count="1 &lt;&lt; header.bitCount" stop_test="" type_name="" comment="Array of colours">
              <struct type_name="RGBQUAD" name="" comment="One colour - entry in the palette">
                  <data name="blue" type="int" format="unsigned" len="1"/>
                  <data name="green" type="int" format="unsigned" len="1"/>
                  <data name="red" type="int" format="unsigned" len="1"/>
                  <data name="resvd" type="int" format="unsigned" len="1" domain="this == 0" comment="Not currently used"/>
              </struct>
            </for>
        </if>
        <eval expr="xorSize = ((((header.bitCount*header.width)+31)/32)*4)*(header.height/2)" display_error="false" display_result="false"/>
        <eval expr="andSize = (((header.width+31)/32)*4)*(header.height/2)" display_error="false" display_result="false"/>
        <if test="header.imageSize == 0 || header.imageSize == (xorSize + andSize)">
            <struct name="pixelData" comment="Pixel data (XOR and AND mask)">
                <data name="xor" type="none" len="xorSize" comment="DIB bits for XOR mask"/>
                <data name="and" type="none" len="andSize" comment="DIB bits for monochrome AND mask"/>
            </struct>
        <else/>
            <data name="pixelData" type="none" len="imageBytes - (addressof(this) - bitmapOffset)" comment="Pixel data (possibly compressed)"/>
        </if>
    </define_struct>
    <define_struct type_name="ICON" comment="An icon for a single frame">
        <eval expr="totalDataSize = 0" display_error="false" display_result="false"/>
        <eval expr="imageBytes = 0" display_error="false" display_result="false"/>
        <data name="reserved" type="int" format="unsigned" len="2" comment="Should always be 0"/>
        <data name="type" type="int" format="unsigned" len="2" domain="{ICON=1,CURSOR=2}" comment="1 for icon (.ICO), 2 for cursor (.CUR) file"/>
        <data name="count" type="int" format="unsigned" len="2" comment="Number of images in the file"/>
        <for name="icon" count="count" stop_test="" type_name="" comment="Stores general information about every image in the file.">
          <struct type_name="ICONDIRENTRY" comment="" expr="">
              <data name="width" type="int" format="unsigned" len="1"/>
              <data name="height" type="int" format="unsigned" len="1"/>
              <data name="colourCount" type="int" format="unsigned" len="1" comment="Number of colors in image (0 if &gt;=8bpp)"/>
              <data name="reserved" type="int" format="unsigned" len="1" comment="Should always be 0"/>
              <data name="planes" type="int" format="unsigned" len="2" comment="Colour planes"/>
              <data name="bitCount" type="int" format="unsigned" len="2" comment="Bits per pixel"/>
              <data name="bytesInRes" type="int" format="unsigned" len="4" comment="How many bytes in this resource?"/>
              <eval expr="imageBytes = bytesInRes" display_error="false" display_result="false"/>
              <eval expr="totalDataSize = totalDataSize + bytesInRes" display_error="false" display_result="false"/>
              <data name="imageOffset" type="int" format="unsigned" len="4" display="hex" comment="Where in the file is this image?"/>
              <use_struct name="bitmapImage" expr="" type_name="BITMAPICONIMAGE" comment="Assume image is straight after icon dir"/>
          </struct>
        </for>
    </define_struct>
    <eval expr="stepCount = 0"/>
    <data name="signature" type="string" len="4" domain="this == &quot;RIFF&quot;" comment="ANI files are just specialized RIFF chunks"/>
    <data name="totalSize" type="int" format="unsigned" len="4" comment="Size of data"/>
    <data name="chunkId" type="string" len="4" domain="this == &quot;ACON&quot;" comment="RIFF chunk id"/>
    <for name="chunk">
        <struct name="chunk" type_name="CHUNK" expr="this.id" comment="A RIFF data chunk">
            <data name="id" type="string" format="ascii" len="4" comment="4 byte ID string used to identify the type of chunk"/>
            <data name="size" type="int" format="unsigned" len="4" comment="Length of chunk"/>
            <switch test="id">
                <case range="anih">
                    <use_struct name="header" type_name="ANIHEADER"/>
                </case>
                <case range="seq ">
                    <for name="sequence" count="stepCount" comment="Defines an order in which the frames are to be displayed, referring to the order in which they appear in the frame list">
                        <data name="" type="int" format="unsigned" len="4" comment="Frame number"/>
                    </for>
                </case>
                <case range="rate">
                    <for name="displayRate" count="stepCount" comment="Display rate for every frame in the sequence. If there is no sequence chunk, it defines a display rate for every frame in the frame list">
                        <data name="" type="int" format="unsigned" len="4" comment="Display rate in 1/60th sec"/>
                    </for>
                </case>
                <case range="LIST">
                    <struct name="list" type_name="LIST" comment="RIFF list. Usually contains frames, sometimes an INFO chunk">
                        <data name="id" type="string" format="ascii" len="4" comment="4 byte ID string used to identify the type of list chunk"/>
                        <eval expr="listStart = addressof(this)"/>
                        <eval expr="listEnd = 0"/>
                        <switch test="id">
                            <case range="INFO">
                                <for name="info" stop_test="listEnd &gt;= listStart + chunk.size - 4">
                                  <struct>
                                    <data name="tag" type="string" len="4"/>
                                    <data name="size" type="int" format="unsigned" len="4"/>
                                    <data name="data" type="string" len="size"/>
                                    <if test="size % 2 != 0">
                                        <data name="" type="none" len="1" comment="Padding byte if length is not even"/>
                                    </if>
                                    <eval expr="listEnd = addressof(this)"/>
                                  </struct>
                                </for>
                            </case>
                            <case range="fram">
                                <for name="frame" stop_test="listEnd &gt;= listStart + chunk.size - 8">
                                  <struct>
                                    <data name="type" type="string" len="4"/>
                                    <data name="size" type="int" format="unsigned" len="4"/>
                                    <if test="type == &quot;icon&quot;">
                                        <use_struct name="icon" type_name="ICON"/>
                                    <else/>
                                        <data name="frameData" type="none" len="size"/>
                                    </if>
                                    <if test="size % 2 != 0">
                                        <data name="" type="none" len="1" comment="Padding byte if length is not even"/>
                                    </if>
                                    <eval expr="listEnd = addressof(this)"/>
                                  </struct>
                                </for>
                            </case>
                            <case range="">
                                <data name="unknownData" type="none" len="size-4"/>
                            </case>
                        </switch>
                    </struct>
                </case>
                <case range="">
                    <data name="unknownData" type="none" len="size"/>
                </case>
            </switch>
            <if test="size % 2 != 0">
                <data name="" type="none" len="1" comment="Padding byte if length is not even"/>
            </if>
        </struct>
    </for>
</binary_file_format>