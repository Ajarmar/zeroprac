<?xml version="1.0"?>
<!DOCTYPE binary_file_format SYSTEM "BinaryFileFormat.dtd">
<binary_file_format name="WindowsEXE" default_byte_order="little" default_read_only="false" default_char_set="ansi" web_site="http://www.csn.ul.ie/~caolan/publink/winresdump/winresdump/doc/pefile.html" allow_editing="false">
  <define_struct type_name="resdir" comment="RESOURCE_DIR">
    <data type="int" name="Characteristics" format="signed" len="4" display="hex"/>
    <data type="date" name="TimeDateStamp" format="c" display="%c"/>
    <data type="int" name="MajorVer" format="unsigned" display="dec" len="2"/>
    <data type="int" name="MinorVer" format="unsigned" display="dec" len="2"/>
    <data type="int" name="NumberNamed" format="unsigned" display="dec" len="2" comment="Size of following ByName array"/>
    <data type="int" name="NumberIDed" format="unsigned" display="dec" len="2" comment="Size of following ByID array"/>
    <for name="ByName" count="NumberNamed">
      <struct expr="this.ResString.Chars">
        <data type="int" name="Name" format="unsigned" len="4" display="hex"/>
        <jump offset="root_addr + (Name &amp; 0x7FFFFFFF)" origin="start">
          <struct name="ResString" type_name="IMAGE_RESOURCE_DIR_STRING_U">
            <data type="int" name="Length" format="unsigned" len="2" display="dec" comment="Number of chars in the string"/>
            <data type="string" name="Chars" format="unicode" len="Length*2" comment="Array of Unicode chars (length given in bytes)"/>
          </struct>
        </jump>
        <data type="int" name="Offset" format="unsigned" len="4" display="hex"/>
        <if test="Offset &gt;= 0x80000000">
          <jump offset="root_addr + (Offset &amp; 0x7FFFFFFF)" origin="start">
            <use_struct name="resdir" type_name="resdir" comment="Recursive use of resdir"/>
          </jump>
        </if>
      </struct>
    </for>
    <for name="ByID" count="NumberIDed">
      <struct expr="this.ID">
        <data type="int" name="ID" format="unsigned" len="4"/>
        <data type="int" name="Offset" format="unsigned" len="4" display="hex"/>
        <if test="Offset &gt;= 0x80000000">
          <jump offset="root_addr + (Offset &amp; 0x7FFFFFFF)" origin="start">
            <use_struct name="resdir" type_name="resdir" comment="Recursive use of resdir"/>
          </jump>
        </if>
      </struct>
    </for>
  </define_struct>
  <define_struct type_name="GUID" expr="{this.p1;%08X}-{this.p2;%04X}-{this.p3;%04X}-{this.b0;%02X}{this.b1;%02X}-{this.b2;%02X}{this.b3;%02X}{this.b4;%02X}{this.b5;%02X}{this.b6;%02X}{this.b7;%02X}">
    <data type="int" name="p1" format="unsigned" len="4" display="hex"/>
    <data type="int" name="p2" format="unsigned" len="2" display="hex"/>
    <data type="int" name="p3" format="unsigned" len="2" display="hex"/>
    <data type="int" name="b0" format="unsigned" len="1" display="hex"/>
    <data type="int" name="b1" format="unsigned" len="1" display="hex"/>
    <data type="int" name="b2" format="unsigned" len="1" display="hex"/>
    <data type="int" name="b3" format="unsigned" len="1" display="hex"/>
    <data type="int" name="b4" format="unsigned" len="1" display="hex"/>
    <data type="int" name="b5" format="unsigned" len="1" display="hex"/>
    <data type="int" name="b6" format="unsigned" len="1" display="hex"/>
    <data type="int" name="b7" format="unsigned" len="1" display="hex"/>
  </define_struct>
  <define_struct type_name="Signature" comment="XXX THIS IS NOT YET COMPLETE">
    <data type="int" name="len" format="unsigned" len="1"/>
    <data type="int" name="SigType" len="1"/>
    <data type="int" name="VarType" len="1" domain="{None,Void,Boolean,Char,SByte,Byte,Int16,UInt16,Int32,UInt32,Int64,UInt64,Single,Double,String, Pointer,ByRef,Value,Class,Var,Array,Generic,TypedByRef, IntPtr=24,UIntPtr, FuncPtr=27,Object,SZArray,MVar,CModReqd,CModOpt,Internal, Sentinel=65,Pinned=69,R4HFA,R8HFA,SysType=80,Boxed,Resvd,Field,Property,Enum}"/>
  </define_struct>
  <eval expr="export_addr = export_offset = 0" display_error="false" display_result="false" comment="This is used later to calculate the address of the export table in the file."/>
  <eval expr="import_addr = import_offset = 0" display_error="false" display_result="false" comment="This is used later to calculate the address of the import table in the file."/>
  <eval expr="rsrc_addr = rsrc_offset = 0" display_error="false" display_result="false" comment="This is used later to calculate the address of the resource table in the file."/>
  <eval expr="cli_addr = cli_offset = 0" display_error="false" display_result="false" comment="This is used later to calculate the address of the CLI table in the file."/>
  <struct name="DOS_hdr" type_name="IMAGE_DOS_HEADER">
    <data type="string" name="e_magic" format="ascii" len="2" type_name="WORD" domain="this == &quot;MZ&quot;" comment="File signature of executable (Mark's initials)"/>
    <data type="int" name="e_cblp" format="signed" len="2" type_name="WORD" comment="Bytes on last page of the file"/>
    <data type="int" name="e_cp" format="signed" len="2" type_name="WORD" comment="Number of pages in the file"/>
    <data type="int" name="e_crlc" format="signed" len="2" type_name="WORD" comment="Relocations"/>
    <data type="int" name="e_cparhdr" format="signed" len="2" type_name="WORD" comment="Size of header in paragraphs"/>
    <data type="int" name="e_minalloc" format="signed" len="2" type_name="WORD" comment="Minimum extra paragraphs needed"/>
    <data type="int" name="e_maxalloc" format="unsigned" len="2" display="dec" type_name="WORD" comment="Maximum extra paragraphs needed"/>
    <data type="int" name="e_ss" format="signed" len="2" type_name="WORD" comment="Initial SS (stack segment)"/>
    <data type="int" name="e_sp" format="signed" len="2" type_name="WORD" comment="Initial SP (stack pointer)"/>
    <data type="int" name="e_csum" format="signed" len="2" type_name="WORD" comment="checksum"/>
    <data type="int" name="e_ip" format="signed" len="2" type_name="WORD" comment="initial IP (instruction pointer)"/>
    <data type="int" name="e_cs" format="signed" len="2" type_name="WORD" comment="Initial (relative) CS (code segment)"/>
    <data type="int" name="e_lfarlc" format="signed" len="2" type_name="WORD" domain="this &gt;= 0x40" comment="File address of relocation table"/>
    <data type="int" name="e_ovno" format="signed" len="2" type_name="WORD" comment="Overlay number"/>
    <data type="none" name="e_res" len="8" comment="reserved"/>
    <data type="int" name="e_oemid" format="signed" len="2" type_name="WORD" comment="OEM ID"/>
    <data type="int" name="e_oeminfo" format="signed" len="2" type_name="WORD" comment="OEM specific value"/>
    <data type="none" name="e_res2" len="20" comment="reserved"/>
    <data type="int" name="e_lfanew" format="signed" len="4" type_name="LONG" comment="File address of the PE header"/>
  </struct>
  <data type="none" name="DOS_stub_code" len="DOS_hdr.e_lfanew - sizeof(DOS_hdr)"/>
  <data type="string" name="Signature" format="default" len="2" type_name="DWORD" comment="The characters PE (for portable executeable) followed by 2 null bytes."/>
  <if test="Signature == &quot;PE&quot;" comment="Appears to be an NT format file">
    <struct name="NT">
      <data type="int" len="2" comment="Rest of signature for NT (4 bytes)"/>
      <struct name="nt_hdr" type_name="IMAGE_NT_HEADERS32">
        <struct name="file_hdr" type_name="IMAGE_FILE_HEADER" comment="PE file header">
          <data type="int" name="Machine" format="signed" len="2" type_name="WORD" domain="{UNKNOWN, iAPX386=332, iAPX486, Pentium, MIPS1= 354, MIPS2, MIPS3, ALPHA=388, Intel64=512, AMD64_K8=0x8664 }" comment="What sort of processor instructions are in the code sections"/>
          <data type="int" name="sections" format="signed" len="2" type_name="WORD" comment="NumberOfSections"/>
          <data type="date" name="TimeDateStamp" format="c" type_name="DWORD" comment="When the linker built this file."/>
          <data type="int" name="symtabptr" format="signed" len="4" type_name="DWORD" comment="PointerToSymbolTable"/>
          <data type="int" name="numsyms" format="signed" len="4" type_name="DWORD" comment="NumberOfSymbols"/>
          <data type="int" name="opthdrsize" format="signed" len="2" type_name="WORD" comment="SizeOfOptionalHeader"/>
          <data type="int" name="RELOCS_STRIPPED" format="unsigned" len="2" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/>
          <data type="int" name="EXECUTABLE_IMAGE" format="unsigned" len="2" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/>
          <data type="int" name="LINE_NUMS_STRIPPED" format="unsigned" len="2" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/>
          <data type="int" name="LOCAL_SYMS_STRIPPED" format="unsigned" len="2" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/>
          <data type="int" name="AGGRESIVE_WS_TRIM" format="unsigned" len="2" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/>
          <data type="int" name="LARGE_ADDRESS_AWARE" format="unsigned" len="2" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/>
          <data type="int" name="unused" format="unsigned" len="2" bits="1" direction="up" comment="unused bit"/>
          <data type="int" name="BYTES_REVERSED_LO" format="unsigned" len="2" bits="1" direction="up" domain="{FALSE,TRUE}"/>
          <data type="int" name="BIT32_MC" format="unsigned" len="2" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/>
          <data type="int" name="DEBUG_STRIPPED" format="unsigned" len="2" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/>
          <data type="int" name="REMOVABLE_RUN_FROM_SWAP" format="unsigned" len="2" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/>
          <data type="int" name="NET_RUN_FROM_SWAP" format="unsigned" len="2" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/>
          <data type="int" name="SYSTEM_FILE" format="unsigned" len="2" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/>
          <data type="int" name="DLL_FILE" format="unsigned" len="2" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/>
          <data type="int" name="UP_SYSTEM_ONLY" format="unsigned" len="2" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/>
          <data type="int" name="BYTES_REVERSED_HI" format="unsigned" len="2" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/>
        </struct>
      </struct>
      <data type="int" name="magic" format="unsigned" len="2" domain="{ NT32=267, NT64=523, ROM=263}"/>
      <if test="magic == 0x10B">
        <struct name="NT_opthdr" type_name="IMAGE_OPTIONAL_HEADER32" comment="Entry point relative to image base">
          <data type="int" name="LinkerMajor" format="unsigned" len="1"/>
          <data type="int" name="LinkerMinor" format="unsigned" len="1"/>
          <data type="int" name="code_size" format="signed" len="4" display="dec" type_name="DWORD" comment="Size of code"/>
          <data type="int" name="init_size" format="signed" len="4" display="dec" type_name="DWORD" comment="SizeOfInitializedData"/>
          <data type="int" name="uninit_size" format="signed" len="4" display="dec" type_name="DWORD" comment="SizeOfUninitializedData"/>
          <data type="int" name="entry" format="signed" len="4" display="hex" type_name="DWORD" comment="Address of entry point."/>
          <data type="int" name="code_base" format="signed" len="4" display="hex" type_name="DWORD" comment="Base of code"/>
          <data type="int" name="data_base" format="signed" len="4" display="hex" type_name="DWORD" comment="Base of data"/>
          <data type="int" name="image_base" format="signed" len="4" display="hex" type_name="DWORD" comment="Virtual address of 1st byte of the file (64K multiple)"/>
          <data type="int" name="sect_align" format="signed" len="4" display="hex" type_name="DWORD" comment="Must be power of 2 between 2^9 and 2^28)"/>
          <data type="int" name="file_align" format="signed" len="4" display="hex" type_name="DWORD" comment="Must be power of 2 between 2^9 and 2^16)"/>
          <data type="int" name="OSmajor" format="unsigned" len="2" type_name="WORD"/>
          <data type="int" name="OSminor" format="unsigned" len="2" type_name="WORD"/>
          <data type="int" name="VerMajor" format="unsigned" len="2" type_name="WORD"/>
          <data type="int" name="VerMinor" format="unsigned" len="2" type_name="WORD"/>
          <data type="int" name="SubMajor" format="unsigned" len="2" type_name="WORD"/>
          <data type="int" name="SubMinor" format="unsigned" len="2" type_name="WORD"/>
          <data type="int" name="Win32Ver" format="signed" len="4" type_name="WORD"/>
          <data type="int" name="image_size" format="signed" len="4" display="dec" type_name="DWORD" comment="Total size including headers (must be multiple of sect_align)"/>
          <data type="int" name="header_size" format="signed" len="4" display="dec" type_name="DWORD" comment="Size of DOS hdr, PE hdr and sector table."/>
          <data type="int" name="checksum" format="signed" len="4" type_name="DWORD" comment="May be zero if not set."/>
          <data type="int" name="subsystem" format="unsigned" len="2" display="hex" type_name="WORD" domain="{UNKNOWN, NATIVE, WIN32, CONSOLE, OS2=5, POSIX=7 }"/>
          <data type="int" name="DLL_characteristics" format="unsigned" len="2" display="hex" type_name="WORD"/>
          <data type="int" name="stack_reserve_size" format="unsigned" len="4" display="dec" type_name="DWORD"/>
          <data type="int" name="stack_commit_size" format="unsigned" len="4" display="dec" type_name="WORD"/>
          <data type="int" name="heap_reserve_size" format="unsigned" len="4" display="dec" type_name="WORD"/>
          <data type="int" name="heap_commit_size" format="unsigned" len="4" display="dec" type_name="DWORD"/>
          <data type="int" name="LoaderFlags" format="signed" len="4" display="hex" type_name="DWORD"/>
          <data type="int" name="va_count" format="signed" len="4" type_name="DWORD" comment="No of data dirs (ie size of following array)"/>
          <eval expr="dir_no = -1" display_error="false" display_result="false"/>
          <for name="data_dir" count="va_count">
            <struct name="data_dir" type_name="IMAGE_DATA_DIRECTORY" expr="dir_no == 0 ? &quot;EXPORT Table&quot; : (dir_no == 1 ? &quot;IMPORT Table&quot; : (dir_no == 2 ? &quot;RESOURCE Table&quot; : (dir_no == 3 ? &quot;EXCEPTION Table&quot; : (dir_no == 4 ? &quot;SECURITY Table&quot; : (dir_no == 5 ? &quot;BASE RELOCATION Table&quot; : (dir_no == 6 ? &quot;DEBUG Directory&quot; : (dir_no == 7 ? &quot;Architecture Specific Data&quot; : (dir_no == 8 ? &quot;GLOBAL POINTER Register&quot; : (dir_no == 9 ? &quot;TLS Table&quot; : (dir_no == 10 ? &quot;LOAD CONFIG Table&quot; : (dir_no == 11 ? &quot;BOUND IMPORT Table&quot; : (dir_no == 12 ? &quot;IMPORT Address Table&quot; : (dir_no == 13 ? &quot;DELAY IMPORT Descriptor&quot; : (dir_no == 14 ? &quot;CLI Header&quot; : &quot;Unknown&quot;))))))))))))));%s">
              <data type="int" name="va" format="unsigned" len="4" display="hex" comment="Virtual address" type_name="ULONG"/>
              <data type="int" name="size" format="unsigned" len="4" type_name="ULONG"/>
              <eval expr="dir_no = dir_no + 1" display_error="false" display_result="false"/>
              <switch test="dir_no">
                <case range="0">
                  <eval expr="export_addr = va" display_error="false" display_result="false"/>
                </case>
                <case range="1">
                  <eval expr="import_addr = va" display_error="false" display_result="false"/>
                </case>
                <case range="2">
                  <eval expr="rsrc_addr = va" display_error="false" display_result="false"/>
                </case>
                <case range="14">
                  <eval expr="cli_addr = va" display_error="false" display_result="false"/>
                </case>
              </switch>
            </struct>
          </for>
        </struct>
      </if>
      <for name="section_header" count="nt_hdr.file_hdr.sections">
        <struct name="section" type_name="IMAGE_SECTION_HEADER" expr="this.name;%s">
          <data type="string" name="name" format="ascii" len="8" comment="length is always 8 - given by:
      #define IMAGE_SIZEOF_SHORT_NAME  8"/>
          <data type="int" name="virt_size" format="unsigned" len="4" type_name="DWORD" comment="physical address OR virtual size (not used?)"/>
          <data type="int" name="RVA" comment="Relative Virtual Address.  The virtual address the object is currently relocated to, relative to the Image Base." format="unsigned" len="4" display="hex" type_name="DWORD"/>
          <data type="int" name="phys_size" format="unsigned" len="4" display="hex" type_name="DWORD" comment="size of raw data"/>
          <data type="int" name="phys_offset" format="unsigned" len="4" type_name="DWORD" comment="pointer to raw data"/>
          <data type="int" name="reloc_offset" format="unsigned" len="4" type_name="DWORD" comment="Pointer to relocations"/>
          <data type="int" name="line_numbers_offset" format="unsigned" len="4" type_name="DWORD" comment="Pointer to line numbers"/>
          <data type="int" name="num_reloc" format="unsigned" len="2" type_name="WORD" comment="Number of relocations"/>
          <data type="int" name="num_line_numbers" format="unsigned" len="2" type_name="WORD" comment="Number of line numbers"/>
          <data type="int" format="unsigned" len="4" display="hex" type_name="bit-field" comment="5 reserved bits" bits="5" direction="up"/>
          <data type="int" name="CODE_SECTION" format="unsigned" len="4" display="hex" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}" comment="Code section"/>
          <data type="int" name="INIT_DATA_SECTION" format="unsigned" len="4" display="hex" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}" comment="Initialized data section"/>
          <data type="int" name="UNINIT_DATA_SECTION" format="unsigned" len="4" display="hex" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}" comment="Uninitialized data section"/>
          <data type="int" format="unsigned" len="4" display="hex" type_name="bit-field" comment="9 reserved bits" bits="9" direction="up"/>
          <data type="int" name="PURGEABLE" format="unsigned" len="4" display="hex" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/>
          <data type="int" name="LOCKED" format="unsigned" len="4" display="hex" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/>
          <data type="int" name="PRELOAD" format="unsigned" len="4" display="hex" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}"/>
          <data type="int" name="ALIGN" format="unsigned" len="4" display="hex" type_name="bit-field" bits="4" direction="up" domain="{DEFAULT16, ALIGN1, ALIGN2, ALIGN4, ALIGN8, ALIGN16, ALIGN32, ALIGN64, ALIGN128, ALIGN256, ALIGN512, ALIGN1024, ALIGN2048, ALIGN4096, ALIGN8192, UNUSED}" comment="Alignment - default is 16 bytes"/>
          <data type="int" name="LNK_NRELOC_OVFL" format="unsigned" len="4" display="hex" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}" comment="Section contains extended relocations"/>
          <data type="int" name="MEM_DISCARDABLE" format="unsigned" len="4" display="hex" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}" comment="Section can be discarded"/>
          <data type="int" name="MEM_NOT_CACHED" format="unsigned" len="4" display="hex" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}" comment="Section cannot be cached"/>
          <data type="int" name="MEM_NOT_PAGED" format="unsigned" len="4" display="hex" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}" comment="Section is not pageable"/>
          <data type="int" name="MEM_SHARED" format="unsigned" len="4" display="hex" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}" comment="Section is shared"/>
          <data type="int" name="MEM_EXECUTE" format="unsigned" len="4" display="hex" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}" comment="Executable section"/>
          <data type="int" name="MEM_READ" format="unsigned" len="4" display="hex" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}" comment="Readable section"/>
          <data type="int" name="MEM_WRITE" format="unsigned" len="4" display="hex" type_name="bit-field" bits="1" direction="up" domain="{FALSE,TRUE}" comment="Writable section"/>
          <if test="export_addr &gt;= RVA &amp;&amp; export_addr &lt; RVA + phys_size">
            <eval expr="export_offset = phys_offset - RVA"/>
          </if>
          <if test="import_addr &gt;= RVA &amp;&amp; import_addr &lt; RVA + phys_size">
            <eval expr="import_offset = phys_offset - RVA"/>
          </if>
          <if test="rsrc_addr &gt;= RVA &amp;&amp; rsrc_addr &lt; RVA + phys_size">
            <eval expr="rsrc_offset = phys_offset - RVA"/>
          </if>
          <if test="cli_addr &gt;= RVA &amp;&amp; cli_addr &lt; RVA + phys_size">
            <eval expr="cli_offset = phys_offset - RVA"/>
          </if>
        </struct>
      </for>

      <eval expr="ii=0" comment="------- START OF SECTIONS -------"/>
      <for name="section" count="nt_hdr.file_hdr.sections" stop_test="ii=ii+1, false">
        <struct>
          <data type="none" name="fill"  len="section_header[ii].phys_offset - addressof(this)" comment="skip any fill bytes"/>
          <data type="none" name="data" len="section_header[ii].phys_size"/>
        </struct>
      </for>
      <eval expr="cli_addr" display_error="false" display_result="false"/>
      <eval expr="cli_offset" display_error="false" display_result="false"/>
      <if test="export_addr &gt; 0">
        <jump offset="export_addr + export_offset" origin="start">
          <struct name="EXPORT_DIRECTORY">
            <data type="int" name="Characteristics" format="unsigned" len="4" display="hex"/>
            <data type="date" name="TimeDateStamp" format="c"/>
            <data type="int" name="MajorVersion" format="unsigned" len="2"/>
            <data type="int" name="MinorVersion" format="unsigned" len="2"/>
            <data type="int" name="NameRVA" format="unsigned" display="hex" len="4"/>
            <if test="NameRVA &gt; 0">
              <jump offset="NameRVA + export_offset" origin="start">
                <data type="string" name="Name" format="default"/>
              </jump>
            </if>
            <data type="int" name="OrdinalBase" format="unsigned" display="dec" len="4"/>
            <data type="int" name="NumFunctions" format="unsigned" display="dec" len="4"/>
            <data type="int" name="NumNames" format="unsigned" display="dec" len="4"/>
            <data type="int" name="AddressTableRVA" format="unsigned" display="hex" len="4"/>
            <jump offset="AddressTableRVA + export_offset" origin="start">
              <for name="FuncAddr" count="NumFunctions">
                <data type="int" format="unsigned" len="4" display="hex"/>
              </for>
            </jump>
            <data type="int" name="NamePointerTableRVA" format="unsigned" display="hex" len="4"/>
            <jump offset="NamePointerTableRVA + export_offset" origin="start">
              <for name="NAME" count="NumNames">
                <struct expr="this.Name;%s">
                  <data type="int" name="NameRVA" format="unsigned" len="4"/>
                  <jump offset="NameRVA + export_offset" origin="start">
                    <data type="string" name="Name" format="default"/>
                  </jump>
                </struct>
              </for>
            </jump>
            <data type="int" name="OrdinalTableRVA" format="unsigned" display="hex" len="4"/>
            <jump offset="OrdinalTableRVA + export_offset" origin="start">
              <for name="ORDINAL" count="NumNames">
                <data type="int" name="Ordinal" format="unsigned" len="2"/>
              </for>
            </jump>
          </struct>
        </jump>
      </if>
      <if test="import_addr &gt; 0">
        <jump offset="import_addr + import_offset" origin="start">
          <for name="IMPORT" stop_test="this.RVAModuleName == 0" count="">
            <struct name="entry" expr="this.RVAModuleName &gt; 0 ? this.ModuleName  : &quot;-----&quot;">
              <data type="int" name="RVAFuncNameList" format="unsigned" len="4" display="hex" type_name="DWORD" comment="Ptr to list of names"/>
              <if test="RVAFuncNameList &gt; 0">
                <jump offset="RVAFuncNameList + import_offset" origin="start">
                  <for name="Addr" count="" stop_test="this.addr == 0">
                    <struct expr="this.addr &gt; 0 ? this.func.name : &quot;-----&quot;">
                      <data type="int" name="addr" format="signed" len="4" display="hex"/>
                      <if test="addr &gt; 0">
                        <jump offset="addr + import_offset" origin="start">
                          <struct name="func">
                            <data type="int" name="ordinal" format="unsigned" len="2" display="hex"/>
                            <data type="string" name="name" format="default"/>
                          </struct>
                        </jump>
                      </if>
                    </struct>
                  </for>
                </jump>
              </if>
              <data type="date" name="TimeDateStamp" format="c"/>
              <data type="int" name="ForwarderChain" format="unsigned" len="4" display="hex"/>
              <data type="int" name="RVAModuleName" format="unsigned" len="4" display="hex" type_name="DWORD"/>
              <if test="RVAModuleName &gt; 0">
                <jump offset="RVAModuleName + import_offset" origin="start">
                  <data type="string" name="ModuleName" format="default"/>
                </jump>
              </if>
              <data type="int" name="RVAFuncAddrList" format="unsigned" len="4" display="hex" type_name="DWORD"/>
              <if test="RVAFuncAddrList  &gt; 0">
                <jump offset="RVAFuncAddrList + import_offset" origin="start">
                  <for name="ActualAddr" count="" stop_test="this == 0" comment="These addresses are the same as in the FuncNameList but are modified in memory.">
                    <data type="int" format="unsigned" len="4" display="hex"/>
                  </for>
                </jump>
              </if>
            </struct>
          </for>
        </jump>
      </if>
      <if test="rsrc_addr &gt; 0">
        <jump offset="rsrc_addr + rsrc_offset" origin="start">
          <struct name="RESOURCE_DIR" type_name="IMAGE_RESOURCE_DIRECTORY">
            <eval expr="root_addr = addressof(this)" display_error="false" display_result="false" comment="We need to store the address of the root resource node as many offsets are relative to this."/>
            <data type="int" name="Characteristics" format="signed" len="4" display="hex"/>
            <data type="date" name="TimeDateStamp" format="c" display="%c"/>
            <data type="int" name="MajorVer" format="unsigned" display="dec" len="2"/>
            <data type="int" name="MinorVer" format="unsigned" display="dec" len="2"/>
            <data type="int" name="NumberNamed" format="unsigned" display="dec" len="2" comment="Size of following ByName array"/>
            <data type="int" name="NumberIDed" format="unsigned" display="dec" len="2" comment="Size of following ByID array"/>
            <for name="ByName" count="NumberNamed">
              <struct expr="this.ResString.Chars;%10s">
                <data type="int" name="Name" format="unsigned" len="4" display="hex"/>
                <jump offset="root_addr + (Name &amp; 0x7FFFFFFF)" origin="start">
                  <struct name="ResString" type_name="IMAGE_RESOURCE_DIR_STRING_U" expr="this.Chars">
                    <data type="int" name="Length" format="unsigned" len="2" display="dec" comment="Number of chars in the string"/>
                    <data type="string" name="Chars" format="unicode" len="Length*2" comment="Array of Unicode chars (length given in bytes)"/>
                  </struct>
                </jump>
                <data type="int" name="Offset" format="unsigned" len="4" display="hex"/>
                <if test="Offset &gt;= 0x80000000">
                  <jump offset="root_addr + (Offset &amp; 0x7FFFFFFF)" origin="start">
                    <use_struct name="resdir" type_name="resdir"/>
                  </jump>
                </if>
              </struct>
            </for>
            <for name="ByID" count="NumberIDed">
              <struct expr="string(this.ID);%s">
                <data type="int" name="ID" format="unsigned" len="4" domain="{ RT_CURSOR=1, RT_BITMAP, RT_ICON, RT_MENU, RT_DIALOG, RT_STRING,  RT_FONTDIR, RT_FONT, RT_ACCELERATOR, RT_RCDATA, RT_MESSAGETABLE, RT_GROUP_CURSOR, RT_GROUP_ICON=14, RT_VERSION=16, RT_DLGINCLUDE, RT_PLUGPLAY=19, RT_VXD, RT_ANICURSOR, RT_ANIICON, RT_HTML, RT_MANIFEST }"/>
                <data type="int" name="Offset" format="unsigned" len="4" display="hex"/>
                <if test="Offset &gt;= 0x80000000">
                  <jump offset="root_addr + (Offset &amp; 0x7FFFFFFF)" origin="start">
                    <use_struct name="resdir" type_name="resdir"/>
                  </jump>
                </if>
              </struct>
            </for>
          </struct>
        </jump>
      </if>
      <if test="cli_addr &gt; 0 &amp;&amp; GetBool(&quot;This file contains .NET CLI data.  Do you want to display it (may take some time)?&quot;)">
        <jump offset="cli_addr + cli_offset" origin="start">
          <struct name="CLI_HEADER" type_name="IMAGE_COR20_HEADER">
            <data type="int" name="Size" len="4" format="unsigned"/>
            <data type="int" name="MajorVersion" len="2" format="unsigned"/>
            <data type="int" name="MinorVersion" len="2" format="unsigned"/>
            <struct name="dirMetadata" type_name="IMAGE_DATA_DIRECTORY">
              <data type="int" name="va" format="unsigned" len="4" display="hex" comment="Virtual Address"/>
              <data type="int" name="size" format="unsigned" len="4" display="OFF"/>
              <if test="va &gt; 0">
                <jump offset="va + cli_offset" origin="start">
                  <struct name="MetadataHeader">
                    <data type="int" name="Signature" format="unsigned" len="4" display="hex" domain="this == 0x424A5342"/>
                    <data type="int" name="MajorVersion" format="unsigned" len="2"/>
                    <data type="int" name="MinorVersion" format="unsigned" len="2"/>
                    <data type="int" format="unsigned" len="4" domain="this == 0" comment="Reserved"/>
                    <data type="int" name="VerLen" format="unsigned" len="4" comment="Length of follwoing string"/>
                    <data type="string" name="Version" format="ascii" len="((VerLen+3)/4)*4" comment="VerLen rounded up to multiple of 4"/>
                    <data type="int" name="Flags" format="unsigned" len="2" display="hex"/>
                    <data type="int" name="NumStreams" format="unsigned" len="2" comment="Number of following streams"/>
                    <for name="Stream" count="NumStreams">
                      <struct expr="this.name;%s">
                        <data type="int" name="offset" format="unsigned" len="4"/>
                        <data type="int" name="size" format="unsigned" len="4"/>
                        <data type="string" name="name" format="ascii"/>
                        <data type="none" len="3 - (addressof(this)-1)%4" comment="Fill bytes to start next byte on DWORD bdry"/>
                        <switch test="name">
                          <case range="#~">
                            <eval expr="MetadataAddress = addressof(MetadataHeader) + offset"/>
                          </case>
                          <case range="#Strings">
                            <eval expr="StringsAddress = addressof(MetadataHeader) + offset"/>
                          </case>
                          <case range="#US">
                            <eval expr="UserStringsAddress = addressof(MetadataHeader) + offset"/>
                          </case>
                          <case range="#Blob">
                            <eval expr="BlobAddress = addressof(MetadataHeader) + offset, BlobEnd = BlobAddress + size"/>
                          </case>
                          <case range="#GUID">
                            <eval expr="GuidAddress = addressof(MetadataHeader) + offset, GuidEnd = GuidAddress + size"/>
                          </case>
                        </switch>
                      </struct>
                    </for>
                    <if test="StringsAddress &gt; 0">
                      <jump offset="StringsAddress + 1" origin="start" comment="Skip first (nul) byte">
                        <for name="#String" stop_test="this.nextChar == 0">
                          <struct expr="this.Str">
                            <data type="string" name="Str" format="ascii"/>
                            <jump offset="0" comment="Peek at the length of the next string">
                              <data type="char" format="ascii" name="nextChar"/>
                            </jump>
                          </struct>
                        </for>
                      </jump>
                    </if>
                    <if test="UserStringsAddress &gt; 0">
                      <jump offset="UserStringsAddress + 1" origin="start" comment="Skip first (nul) byte">
                        <for name="#UserString" stop_test="this.nextLen == 0">
                          <struct expr="this.Str">
                            <data type="int" name="len" format="unsigned" len="1"/>
                            <data type="string" name="Str" format="unicode" len="len-1"/>
                            <data type="int" name="ExtEncoding" format="unsigned" len="1" domain="this == 0 || this == 1"/>
                            <jump offset="0" comment="Peek at the length of the next string">
                              <data type="int" name="nextLen" format="unsigned" len="1"/>
                            </jump>
                          </struct>
                        </for>
                      </jump>
                    </if>
                    <if test="GuidAddress &gt; 0">
                      <jump offset="GuidAddress" origin="start">
                        <for name="#GUID" count="(GuidEnd-GuidAddress)/16" comment="Each GUID is 16 bytes">
                          <use_struct type_name="GUID"/>
                        </for>
                      </jump>
                    </if>
                    <if test="BlobAddress &gt; 0">
                      <jump offset="BlobAddress" origin="start">
                        <data type="none" name="#Blobs" len="BlobEnd-addressof(this)" comment="All BLOBs are stored in this block"/>
                      </jump>
                    </if>
                    <if test="MetadataAddress &gt; 0">
                      <jump offset="MetadataAddress" origin="start">
                        <struct name="MetadataTablesHeader">
                          <data type="int" name="res1" format="unsigned" len="4" domain="this == 0"/>
                          <data type="int" name="MajorVersion" format="unsigned" len="1"/>
                          <data type="int" name="MinorVersion" format="unsigned" len="1"/>
                          <data type="int" name="OffsetSizeFlags" format="unsigned" len="1"/>
                          <eval expr="StringIdxSize = (OffsetSizeFlags&amp;1) != 0 ? 4 : 2" display_error="false" display_result="false" comment="Size of an index into String table (word or dword)"/>
                          <eval expr="GuidIdxSize = (OffsetSizeFlags&amp;2) != 0 ? 4 : 2" display_error="false" display_result="false" comment="Size of an index into GUID table (word or dword)"/>
                          <eval expr="BlobIdxSize = (OffsetSizeFlags&amp;4) != 0 ? 4 : 2" display_error="false" display_result="false" comment="Size of an index into Blob table (word or dword)"/>
                          <data type="int" name="res2" format="unsigned" len="1" domain="this == 1"/>
                          <data type="int" name="valid" format="unsigned" len="8" display="hex" comment="Bitmask saying which (of 64) tables are present"/>
                          <data type="int" name="sorted" format="unsigned" len="8" display="hex" comment="Bitmask saying which (of 64) tables are sorted"/>
                          <eval expr="ii = 0" display_error="false" display_result="false" comment="Init loop var ii (0 to 63)"/>
                          <eval expr="TabName[0]=&quot;Module&quot;, TabName[1]=&quot;TypeRef&quot;, TabName[2]=&quot;TypeDef&quot;" comment="Set up table names"/>
                          <eval expr="TabName[4]=&quot;Field&quot;, TabName[6]=&quot;MethodDef&quot;, TabName[8]=&quot;Param&quot;"/>
                          <eval expr="TabName[9]=&quot;InterfaceImpl&quot;, TabName[10]=&quot;MemberRef&quot;, TabName[11]=&quot;Constant&quot;"/>
                          <eval expr="TabName[12]=&quot;CustomAttr&quot;, TabName[13]=&quot;FieldMarshal&quot;, TabName[14]=&quot;DeclSecurity&quot;"/>
                          <eval expr="TabName[15]=&quot;ClassLayout&quot;, TabName[16]=&quot;FieldLayout&quot;, TabName[17]=&quot;StandaloneSig&quot;"/>
                          <eval expr="TabName[18]=&quot;EventMap&quot;, TabName[20]=&quot;Event&quot;, TabName[21]=&quot;PropertyMap&quot;"/>
                          <eval expr="TabName[23]=&quot;Property&quot;, TabName[24]=&quot;MethodSemantics&quot;, TabName[25]=&quot;MethodImpl&quot;"/>
                          <eval expr="TabName[26]=&quot;ModuleRef&quot;, TabName[27]=&quot;TypeSpec&quot;, TabName[28]=&quot;ImplMap&quot;"/>
                          <eval expr="TabName[29]=&quot;FieldRVA&quot;, TabName[32]=&quot;Assembly&quot;, TabName[33]=&quot;AssemblyProcessor&quot;"/>
                          <eval expr="TabName[34]=&quot;AssemblyOS&quot;, TabName[35]=&quot;AssemblyRef&quot;, TabName[36]=&quot;AssemblyRefProcessor&quot;"/>
                          <eval expr="TabName[37]=&quot;AssemblyRefOS&quot;, TabName[38]=&quot;File&quot;, TabName[39]=&quot;ExportedType&quot;"/>
                          <eval expr="TabName[40]=&quot;ManifestResource&quot;, TabName[41]=&quot;NestedClass&quot;"/>
                          <for name="TableSize" count="64" stop_test="ii=ii+1, false" comment="If a table is present save its size">
                            <if test="(valid &amp; (1 &lt;&lt; ii)) != 0">
                              <struct name="sizeStruct" expr="Table {ii;%2d} ({TabName[ii];%s}) size = {this.size}">
                                <data type="int" name="size" format="unsigned" len="4" comment="Number of rows in the table"/>
                                <eval expr="TabSize[ii] = size" display_error="false" display_result="false"/>
                              </struct>
                              <else/>
                              <eval expr="TabSize[ii] = 0"/>
                            </if>
                          </for>
                          <eval expr="TypeDefIdxSize = TabSize[2] &gt; 0xFFFF ? 4 : 2"/>
                          <eval expr="FieldIdxSize = TabSize[4] &gt; 0xFFFF ? 4 : 2"/>
                          <eval expr="EventIdxSize = TabSize[20] &gt; 0xFFFF ? 4 : 2"/>
                          <eval expr="PropertyIdxSize = TabSize[23] &gt; 0xFFFF ? 4 : 2"/>
                          <eval expr="MethodDefIdxSize = TabSize[6] &gt; 0xFFFF ? 4 : 2"/>
                          <eval expr="ModuleRefIdxSize = TabSize[26] &gt; 0xFFFF ? 4 : 2"/>
                          <eval expr="AssemblyRefIdxSize = TabSize[35] &gt; 0xFFFF ? 4 : 2"/>
                          <eval expr="ParamIdxSize = TabSize[8] &gt; 0xFFFF ? 4 : 2"/>
                          <eval expr="TypeDefOrRefIdxSize = max(max(TabSize[1], TabSize[2]), TabSize[27]) &gt; 0x3FFF ? 4 : 2"/>
                          <eval expr="MethodRefParentIdxSize = max(max(max(max(TabSize[1], TabSize[2]), TabSize[6]), TabSize[26]), TabSize[27]) &gt; 0x1FFF ? 4 : 2"/>
                          <eval expr="HasConstantIdxSize = max(max(TabSize[4], TabSize[8]), TabSize[23]) &gt; 0x3FFF ? 4 : 2"/>
                          <eval expr="ResolutionScopeIdxSize = max(max(max(TabSize[0], TabSize[1]), TabSize[26]), TabSize[35]) &gt; 0x3FFF ? 4 : 2"/>
                          <eval expr="HasCustomAttributeIdxSize = max(max(max(max(max(TabSize[6], TabSize[4]), max(TabSize[1], TabSize[2])), max(max(TabSize[8], TabSize[9]), max(TabSize[10], TabSize[0]))), max(max(max(TabSize[14], TabSize[23]), max(TabSize[20], TabSize[17])), max(max(TabSize[26], TabSize[27]), max(TabSize[32], TabSize[35])))), max(max(TabSize[38], TabSize[39]),TabSize[40])) &gt; 0x7FF ? 4 : 2"/>
                          <eval expr="CustomAttributeTypeIdxSize = max(TabSize[6],TabSize[10]) &gt; 0x1FFF ? 4 : 2" comment="Encoded in 3 bits even though only 2 tables used"/>
                          <eval expr="HasFieldMarshallIdxSize = max(TabSize[4],TabSize[8]) &gt; 0x7FFF ? 4 : 2"/>
                          <eval expr="HasDeclSecurityIdxSize = max(max(TabSize[2],TabSize[6]),TabSize[32]) &gt; 0x3FFF ? 4 : 2"/>
                          <eval expr="HasSemanticsIdxSize = max(TabSize[20],TabSize[23]) &gt; 0x7FFF ? 4 : 2"/>
                          <eval expr="MethodDefOrRefIdxSize = max(TabSize[6],TabSize[10]) &gt; 0x7FFF ? 4 : 2"/>
                          <eval expr="MemberForwardedIdxSize = max(TabSize[4],TabSize[6]) &gt; 0x7FFF ? 4 : 2"/>
                          <eval expr="ImplementationIdxSize = max(TabSize[38],TabSize[35]) &gt; 0x3FFF ? 4 : 2"/>

                          <for name="Module" count="TabSize[0]" comment="This table has only one row representing this module">
                            <struct expr="this.Name;%s">
                              <data type="int" name="Generation" format="unsigned" len="2" domain="this == 0"/>
                              <data type="int" name="NameIdx" format="unsigned" len="StringIdxSize"/>
                              <jump offset="StringsAddress + NameIdx" origin="start">
                                <data type="string" name="Name" format="ascii"/>
                              </jump>
                              <data type="int" name="VerIdIdx" format="unsigned" len="GuidIdxSize"/>
                              <jump offset="GuidAddress + VerIdIdx - 1" origin="start" comment="Start of GUID table is at offset one(1) for some reason">
                                <use_struct name="GUID" type_name="GUID"/>
                              </jump>
                              <data type="int" name="EncIdIdx" format="unsigned" len="GuidIdxSize" domain="this == 0"/>
                              <data type="int" name="EncBaseIdIdx" format="unsigned" len="GuidIdxSize" domain="this == 0"/>
                            </struct>
                          </for>
                          <for name="TypeRef" count="TabSize[1]" comment="Each row is a referenced class">
                            <struct expr="{this.Namespace;%s}{strlen(this.Namespace) &gt; 0 ? &quot;.&quot; : &quot;&quot;;%s}{this.Name;%s}">
                              <data type="int" name="ResolutionScope" format="unsigned" len="ResolutionScopeIdxSize"/>
                              <data type="int" name="NameIdx" format="unsigned" len="StringIdxSize"/>
                              <jump offset="StringsAddress + NameIdx" origin="start">
                                <data type="string" name="Name" format="ascii"/>
                              </jump>
                              <data type="int" name="NamespaceIdx" format="unsigned" len="StringIdxSize"/>
                              <jump offset="StringsAddress + NamespaceIdx" origin="start">
                                <data type="string" name="Namespace" format="ascii"/>
                              </jump>
                            </struct>
                          </for>
                          <for name="TypeDef" count="TabSize[2]" comment="Each row is a class defined in this module">
                            <struct expr="{this.Namespace;%s}.{this.Name;%s}">
                              <data type="int" name="Visibility" format="unsigned" len="4" bits="3" domain="{NotPublic,Public,NestedPublic,Private,Family,Assembly,FamANDAssem,FamORAssem}"/>
                              <data type="int" name="Layout"     format="unsigned" len="4" bits="2" domain="{Auto,Sequential,Explicit}"/>
                              <data type="int" name="Semantics"  format="unsigned" len="4" bits="2" domain="{Class,Interface}"/>
                              <data type="int" name="Abstract"   format="unsigned" len="4" bits="1"/>
                              <data type="int" name="Sealed"     format="unsigned" len="4" bits="1"/>
                              <data type="int"                   format="unsigned" len="4" bits="1"/>
                              <data type="int" name="SpecialName" format="unsigned" len="4" bits="1"/>
                              <data type="int" name="RTSpecialName" format="unsigned" len="4" bits="1"/>
                              <data type="int" name="Import"     format="unsigned" len="4" bits="1"/>
                              <data type="int" name="Serializable" format="unsigned" len="4" bits="1"/>
                              <data type="int"                   format="unsigned" len="4" bits="2"/>
                              <data type="int" name="StrFormat"  format="unsigned" len="4" bits="2" domain="{ANSI,Unicode,Auto,Custom}"/>
                              <data type="int" name="HasSecurity" format="unsigned" len="4" bits="1"/>
                              <data type="int"                   format="unsigned" len="4" bits="1"/>
                              <data type="int" name="BeforeFieldInit" format="unsigned" len="4" bits="1"/>
                              <data type="int" name="Forwarder"  format="unsigned" len="4" bits="1"/>
                              <data type="int" name="CustomFormat" format="unsigned" len="4" bits="2"/>
                              <data type="int" name="NameIdx" format="unsigned" len="StringIdxSize"/>
                              <jump offset="StringsAddress + NameIdx" origin="start">
                                <data type="string" name="Name" format="ascii"/>
                              </jump>
                              <data type="int" name="NamespaceIdx" format="unsigned" len="StringIdxSize"/>
                              <jump offset="StringsAddress + NamespaceIdx" origin="start">
                                <data type="string" name="Namespace" format="ascii"/>
                              </jump>
                              <data type="int" name="ExtendsIdx" format="unsigned" len="TypeDefOrRefIdxSize"/>
                              <if test="idx=(ExtendsIdx&gt;&gt;2)-1, ExtendsIdx &gt; 0">
                                <switch test="ExtendsIdx &amp; 0x3">
                                  <case range="0">
                                    <eval expr="Base Class = TypeDef {idx} ({TypeDef[idx].Namespace;%s}.{TypeDef[idx].Name;%s})" display_result="true"/>
                                  </case>
                                  <case range="1">
                                    <eval expr="Base Class = TypeRef {idx} ({TypeRef[idx].Namespace;%s}.{TypeRef[idx].Name;%s})" display_result="true"/>
                                  </case>
                                  <case range="2">
                                    <eval expr="Base Class = TypeSpec{idx}" display_result="true"/>
                                  </case>
                                </switch>
                              </if>
                              <data type="int" name="FirstFieldIdx" format="unsigned" len="FieldIdxSize" comment="First field of this type"/>
                              <data type="int" name="FirstMethodDefIdx" format="unsigned" len="MethodDefIdxSize" comment="First method defn for this type"/>
                            </struct>
                          </for>
                          <for name="Field" count="TabSize[4]" comment="Fields of above classes">
                            <struct expr="this.Name;%s">
                              <data type="int" name="Access" format="unsigned" len="2" bits="3" domain="{None,Private,FamANDAssem,Assembly,Family,FamORAssem,Public}"/>
                              <data type="int" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="Static" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="InitOnly" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="Literal" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="NotSerialized" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="HasRVA" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="SpecialName" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="RTSpecialName" format="unsigned" len="2" bits="1"/>
                              <data type="int" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="FieldMarshal" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="PInvokeImpl" format="unsigned" len="2" bits="1"/>
                              <data type="int" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="HasDefault" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="NameIdx" format="unsigned" len="StringIdxSize"/>
                              <jump offset="StringsAddress + NameIdx" origin="start">
                                <data type="string" name="Name" format="ascii"/>
                              </jump>
                              <data type="int" name="SigIdx" format="unsigned" len="BlobIdxSize"/>
                            </struct>
                          </for>
                          <for name="MethodDef" count="TabSize[6]" comment="Methods of above classes">
                            <struct expr="this.Name;%s">
                              <data type="int" name="RVA" format="unsigned" len="4" display="hex"/>
                              <data type="int" name="CodeType" format="unsigned" len="2" bits="2" domain="{IL,Native,OPTIL,Runtime}"/>
                              <data type="int" name="Unmanaged" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="NoInlining" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="ForwardRef" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="Synchronized" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="Access" format="unsigned" len="2" bits="3" domain="{None,Private,FamANDAssem,Assembly,Family,FamORAssem,Public}"/>
                              <data type="int" name="UnmanagedExport" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="Static" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="Final" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="Virtual" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="HideBySig" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="NewSlot" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="CheckAccessOnOverride" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="Abstract" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="SpecialName" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="RTSpecialName" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="PInvokeImpl" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="HasSecurity" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="RequireSecObject" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="NameIdx" format="unsigned" len="StringIdxSize"/>
                              <jump offset="StringsAddress + NameIdx" origin="start">
                                <data type="string" name="Name" format="ascii"/>
                              </jump>
                              <data type="int" name="SigIdx" format="unsigned" len="BlobIdxSize"/>
                              <data type="int" name="FirstParamIdx" format="unsigned" len="ParamIdxSize" comment="First parameter of this method"/>
                            </struct>
                          </for>
                          <for name="Param" count="TabSize[8]" comment="Parameters of above methods">
                            <struct expr="this.Name;%s">
                              <data type="int" name="In" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="Out" format="unsigned" len="2" bits="1"/>
                              <data type="int" format="unsigned" len="2" bits="2"/>
                              <data type="int" name="Optional" format="unsigned" len="2" bits="1"/>
                              <data type="int" format="unsigned" len="2" bits="7"/>
                              <data type="int" name="HasDefault" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="HasFieldMarshall" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="Sequence" format="unsigned" len="2"/>
                              <data type="int" name="NameIdx" format="unsigned" len="StringIdxSize"/>
                              <jump offset="StringsAddress + NameIdx" origin="start">
                                <data type="string" name="Name" format="ascii"/>
                              </jump>
                            </struct>
                          </for>
                          <for name="IfaceImpl" count="TabSize[9]" comment="Which class implement which interface(s)">
                            <struct>
                              <data type="int" name="ClassIdx" format="unsigned" len="TypeDefIdxSize"/>
                              <data type="int" name="InterfaceIdx" format="unsigned" len="TypeDefOrRefIdxSize"/>
                            </struct>
                          </for>
                          <for name="MethodRef" count="TabSize[10]" comment="Imported Methods">
                            <struct expr="this.Name;%s">
                              <data type="int" name="ClassIdx" format="unsigned" len="MethodRefParentIdxSize"/>
                              <data type="int" name="NameIdx" format="unsigned" len="StringIdxSize"/>
                              <jump offset="StringsAddress + NameIdx" origin="start">
                                <data type="string" name="Name" format="ascii"/>
                              </jump>
                              <data type="int" name="SigIdx" format="unsigned" len="BlobIdxSize"/>
                            </struct>
                          </for>
                          <for name="Constant" count="TabSize[11]">
                            <struct expr="string(this.Type)">
                              <data type="int" name="Type" format="unsigned" domain="{Boolean=2,Char,SByte,Byte,Int16,UInt16,Int32,UInt32,Int64,UInt64,Single,Double,String, NULL=18}" len="1"/>
                              <data type="int" len="1" domain="this==0" comment="pad byte"/>
                              <data type="int" name="ParIdx" format="unsigned" len="HasConstantIdxSize"/>
                              <data type="int" name="ValueIdx" format="unsigned" len="BlobIdxSize"/>
                            </struct>
                          </for>
                          <for name="CustomAttr" count="TabSize[12]" comment="Custom attributes">
                            <struct>
                              <data type="int" name="ParIdx" format="unsigned" len="HasCustomAttributeIdxSize"/>
                              <data type="int" name="TypeIdx" format="unsigned" len="CustomAttributeTypeIdxSize" comment="C'tor method of the class"/>
                              <data type="int" name="ValueIdx" format="unsigned" len="BlobIdxSize"/>
                            </struct>
                          </for>
                          <for name="FieldMarshall" count="TabSize[13]">
                            <struct>
                              <data type="int" name="ParIdx" format="unsigned" len="HasFieldMarshallIdxSize"/>
                              <data type="int" name="NativeTypeIdx" format="unsigned" len="BlobIdxSize"/>
                            </struct>
                          </for>
                          <for name="DeclSecurity" count="TabSize[14]">
                            <struct>
                              <data type="int" name="Action" format="unsigned" len="2"/>
                              <data type="int" name="ParIdx" format="unsigned" len="HasDeclSecurityIdxSize"/>
                              <data type="int" name="PermSetIdx" format="unsigned" len="BlobIdxSize"/>
                            </struct>
                          </for>
                          <for name="ClassLayout" count="TabSize[15]" comment="handles field packing">
                            <struct>
                              <data type="int" name="PackingSize" format="unsigned" len="2"/>
                              <data type="int" name="ClassSize" format="unsigned" len="4"/>
                              <data type="int" name="ClassIdx" format="unsigned" len="TypeDefIdxSize"/>
                            </struct>
                          </for>
                          <for name="FieldLayout" count="TabSize[16]">
                            <struct>
                              <data type="int" name="Offset" format="unsigned" len="4"/>
                              <data type="int" name="FieldIdx" format="unsigned" len="FieldIdxSize"/>
                            </struct>
                          </for>
                          <for name="StandaloneSig" count="TabSize[17]">
                            <data type="int" name="SigIdx" format="unsigned" len="BlobIdxSize"/>
                          </for>
                          <for name="EventMap" count="TabSize[18]">
                            <struct>
                              <data type="int" name="ClassIdx" format="unsigned" len="TypeDefIdxSize"/>
                              <data type="int" name="FirstEventIdx" format="unsigned" len="EventIdxSize"/>
                            </struct>
                          </for>
                          <for name="Event" count="TabSize[20]">
                            <struct expr="this.Name;%s">
                              <data type="int" name="Flags" format="unsigned" len="2" type_name="EventAttribute"/>
                              <data type="int" name="NameIdx" format="unsigned" len="StringIdxSize"/>
                              <jump offset="StringsAddress + NameIdx" origin="start">
                                <data type="string" name="Name" format="ascii"/>
                              </jump>
                              <data type="int" name="TypeIdx" format="unsigned" len="TypeDefOrRefIdxSize"/>
                            </struct>
                          </for>
                          <for name="PropertyMap" count="TabSize[21]">
                            <struct>
                              <data type="int" name="ParIdx" format="unsigned" len="TypeDefIdxSize"/>
                              <data type="int" name="FirstPropertyIdx" format="unsigned" len="PropertyIdxSize"/>
                            </struct>
                          </for>
                          <for name="Property" count="TabSize[23]">
                            <struct expr="this.Name;%s">
                              <data type="int" name="Flags" format="unsigned" len="2" type_name="PropertyAttribute"/>
                              <data type="int" name="NameIdx" format="unsigned" len="StringIdxSize"/>
                              <jump offset="StringsAddress + NameIdx" origin="start">
                                <data type="string" name="Name" format="ascii"/>
                              </jump>
                              <data type="int" name="TypeIdx" format="unsigned" len="BlobIdxSize" comment="Signature?"/>
                            </struct>
                          </for>
                          <for name="MethodSemantics" count="TabSize[24]">
                            <struct>
                              <data type="int" name="Setter" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="Getter" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="Other" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="AddOn" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="RemoveOn" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="Fire" format="unsigned" len="2" bits="1"/>
                              <data type="int" name="MethodIdx" format="unsigned" len="MethodDefIdxSize"/>
                              <data type="int" name="AssociationIdx" format="unsigned" len="HasSemanticsIdxSize"/>
                            </struct>
                          </for>
                          <for name="MethodImpl" count="TabSize[25]">
                            <struct>
                              <data type="int" name="ClassIdx" format="unsigned" len="TypeDefIdxSize"/>
                              <data type="int" name="MethodBodyIdx" format="unsigned" len="MethodDefOrRefIdxSize"/>
                              <data type="int" name="MethodDeclIdx" format="unsigned" len="MethodDefOrRefIdxSize"/>
                            </struct>
                          </for>
                          <for name="ModuleRef" count="TabSize[26]">
                            <struct expr="this.Name;%s">
                              <data type="int" name="NameIdx" format="unsigned" len="StringIdxSize"/>
                              <jump offset="StringsAddress + NameIdx" origin="start">
                                <data type="string" name="Name" format="ascii"/>
                              </jump>
                            </struct>
                          </for>
                          <for name="TypeSpec" count="TabSize[27]">
                            <struct>
                              <data type="int" name="SigIdx" format="unsigned" len="BlobIdxSize"/>
                            </struct>
                          </for>
                          <for name="ImplMap" count="TabSize[28]">
                            <struct expr="this.ImportedName;%s">
                              <data type="int" name="MappingFlags" format="unsigned" len="2" type_name="PInvokeAttributes"/>
                              <data type="int" name="MemberForwardedIdx" format="unsigned" len="MemberForwardedIdxSize"/>
                              <data type="int" name="ImportedNameIdx" format="unsigned" len="StringIdxSize"/>
                              <jump offset="StringsAddress + ImportedNameIdx" origin="start">
                                <data type="string" name="ImportedName" format="ascii"/>
                              </jump>
                              <data type="int" name="ModuleRefIdx" format="unsigned" len="ModuleRefIdxSize"/>
                            </struct>
                          </for>
                          <for name="FieldRVA" count="TabSize[29]">
                            <struct>
                              <data type="int" name="RVA" format="unsigned" len="4" display="hex"/>
                              <data type="int" name="FieldIdx" format="unsigned" len="FieldIdxSize"/>
                            </struct>
                          </for>
                          <for name="Assembly" count="TabSize[32]">
                            <struct expr="this.Name;%s">
                              <data type="int" name="HaskAlgId" format="unsigned" len="4" type_name="AssemblyHashAlgorithm"/>
                              <data type="int" name="MajorVersion" format="unsigned" len="2"/>
                              <data type="int" name="MinorVersion" format="unsigned" len="2"/>
                              <data type="int" name="Build" format="unsigned" len="2"/>
                              <data type="int" name="Revision" format="unsigned" len="2"/>
                              <data type="int" name="Flags" format="unsigned" len="4" type_name="AssemblyFlags"/>
                              <data type="int" name="PublicKeyIdx" format="unsigned" len="BlobIdxSize"/>
                              <data type="int" name="NameIdx" format="unsigned" len="StringIdxSize"/>
                              <jump offset="StringsAddress + NameIdx" origin="start">
                                <data type="string" name="Name" format="ascii"/>
                              </jump>
                              <data type="int" name="CultureIdx" format="unsigned" len="StringIdxSize"/>
                              <jump offset="StringsAddress + CultureIdx" origin="start">
                                <data type="string" name="Culture" format="ascii"/>
                              </jump>
                            </struct>
                          </for>
                          <for name="AssemblyProcessor" count="TabSize[33]">
                            <struct>
                              <data type="int" name="CPU" format="unsigned" len="4"/>
                            </struct>
                          </for>
                          <for name="AssemblyOperatingSystem" count="TabSize[34]">
                            <struct>
                              <data type="int" name="OSPlatformID" format="unsigned" len="4"/>
                              <data type="int" name="OSMajorVer" format="unsigned" len="4"/>
                              <data type="int" name="OSMinorVer" format="unsigned" len="4"/>
                            </struct>
                          </for>
                          <for name="AssemblyRef" count="TabSize[35]">
                            <struct expr="this.Name;%s">
                              <data type="int" name="MajorVersion" format="unsigned" len="2"/>
                              <data type="int" name="MinorVersion" format="unsigned" len="2"/>
                              <data type="int" name="Build" format="unsigned" len="2"/>
                              <data type="int" name="Revision" format="unsigned" len="2"/>
                              <data type="int" name="Flags" format="unsigned" len="4" type_name="AssemblyFlags"/>
                              <data type="int" name="PublicKeyOrTokenIdx" format="unsigned" len="BlobIdxSize"/>
                              <data type="int" name="NameIdx" format="unsigned" len="StringIdxSize"/>
                              <jump offset="StringsAddress + NameIdx" origin="start">
                                <data type="string" name="Name" format="ascii"/>
                              </jump>
                              <data type="int" name="CultureIdx" format="unsigned" len="StringIdxSize"/>
                              <jump offset="StringsAddress + CultureIdx" origin="start">
                                <data type="string" name="Culture" format="ascii"/>
                              </jump>
                              <data type="int" name="HashValueIdx" format="unsigned" len="BlobIdxSize"/>
                            </struct>
                          </for>
                          <for name="AssemblyRefProcessor" count="TabSize[36]">
                            <struct>
                              <data type="int" name="CPU" format="unsigned" len="4"/>
                              <data type="int" name="AssemblyRefIdx" format="unsigned" len="AssemblyRefIdxSize"/>
                            </struct>
                          </for>
                          <for name="AssemblyRefOS" count="TabSize[37]">
                            <struct>
                              <data type="int" name="OSPlatformID" format="unsigned" len="4"/>
                              <data type="int" name="OSMajorVer" format="unsigned" len="4"/>
                              <data type="int" name="OSMinorVer" format="unsigned" len="4"/>
                              <data type="int" name="AssemblyRefIdx" format="unsigned" len="AssemblyRefIdxSize"/>
                            </struct>
                          </for>
                          <for name="File" count="TabSize[38]" comment="External files in this assembly">
                            <struct expr="this.Name;%s">
                              <data type="int" name="ContainsNoMetaData" format="unsigned" len="4" bits="1"/>
                              <data type="int" name="NameIdx" format="unsigned" len="StringIdxSize"/>
                              <jump offset="StringsAddress + NameIdx" origin="start">
                                <data type="string" name="Name" format="ascii"/>
                              </jump>
                              <data type="int" name="HashValueIdx" format="unsigned" len="BlobIdxSize"/>
                            </struct>
                          </for>
                          <for name="ExportedType" count="TabSize[39]">
                            <struct expr="{this.Namespace;%s}.{this.Name;%s}">
                              <data type="int" name="Flags" format="unsigned" len="4" type_name="TypeAttributes"/>
                              <data type="int" name="TypeDefIdx" format="unsigned" len="4" comment="Note: always 4, not TypeDefIdxSize"/>
                              <data type="int" name="NameIdx" format="unsigned" len="StringIdxSize"/>
                              <jump offset="StringsAddress + NameIdx" origin="start">
                                <data type="string" name="Name" format="ascii"/>
                              </jump>
                              <data type="int" name="NamespaceIdx" format="unsigned" len="StringIdxSize"/>
                              <jump offset="StringsAddress + NamespaceIdx" origin="start">
                                <data type="string" name="Namespace" format="ascii"/>
                              </jump>
                              <data type="int" name="ImplementationIdx" format="unsigned" len="ImplementationIdxSize"/>
                            </struct>
                          </for>
                          <for name="ManifestResource" count="TabSize[40]">
                            <struct expr="this.Name;%s">
                              <data type="int" name="Offset" format="unsigned" len="4"/>
                              <data type="int" name="Visibility" format="unsigned" len="4" bits="3" domain="{Public=1,Private}"/>
                              <data type="int" name="NameIdx" format="unsigned" len="StringIdxSize"/>
                              <jump offset="StringsAddress + NameIdx" origin="start">
                                <data type="string" name="Name" format="ascii"/>
                              </jump>
                              <data type="int" name="ImplementationIdx" format="unsigned" len="ImplementationIdxSize"/>
                            </struct>
                          </for>
                          <for name="NestedClass" count="TabSize[41]">
                            <struct>
                              <data type="int" name="NextedClassIdx" format="unsigned" len="TypeDefIdxSize"/>
                              <data type="int" name="EnclosingClassIdx" format="unsigned" len="TypeDefIdxSize"/>
                            </struct>
                          </for>
                        </struct>
                      </jump>
                    </if>
                  </struct>
                </jump>
              </if>
            </struct>
            <data type="int" name="ILONLY" format="unsigned" len="4" display="OFF" bits="1" direction="up"/>
            <data type="int" name="REQ32BIT" format="unsigned" len="4" display="OFF" bits="1" direction="up"/>
            <data type="int" name="IL_LIBRARY" format="unsigned" len="4" display="OFF" bits="1" direction="up"/>
            <data type="int" name="STRONGNAMESIGNED" format="unsigned" len="4" display="OFF" bits="1" direction="up"/>
            <data type="int" name="NATIVE_ENTRYPOINT" format="unsigned" len="4" display="OFF" bits="1" direction="up"/>
            <data type="int" format="unsigned" len="4" bits="11" direction="up" comment="unused bits"/>
            <data type="int" name="TRACKDEBUGDATA" format="unsigned" len="4" display="OFF" bits="1" direction="up"/>
            <data type="int" name="EntryPoint" format="unsigned" len="4" display="hex" comment="EntryPointRVA if NATIVE_ENTRYPOINT is set, otherwise EntryPointToken"/>
            <for name="dir" count="Size/8 - 3" comment="The number of entries is given by Size minus above 24 bytes.  Each entry is 8 bytes.">
              <struct name="" type_name="IMAGE_DATA_DIRECTORY">
                <data type="int" name="va" format="unsigned" len="4" display="hex"/>
                <data type="int" name="size" format="unsigned" len="4"/>
                <if test="va != 0">
                  <jump offset="va + cli_offset" origin="current">
                    <struct name="MetadataHeader">
                      <data type="int" name="Signature" format="unsigned" len="4"/>
                    </struct>
                  </jump>
                </if>
              </struct>
            </for>
          </struct>
        </jump>
      </if>
    </struct>
  <else />
    <data type="none" name="FileData"/>
  </if>
</binary_file_format>
